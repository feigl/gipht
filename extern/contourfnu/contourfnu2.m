function varargout = contourfnu2(x,y,data,varargin)
%function varargout = contourfnu2(x,y,data,v,cmap,pos_colorbar,overticklabel,method,ninterp,nancolor,circsize)
% non-uniform contourf/imagesc/colorbar
%
%    Input variables
% x             : x-coordinates of grid, vector or 2d matrix
% y             : y-coordinates of grid, vector or 2d matrix
%                 If x and y are vectors, then length(x)==size(z,2) and length(y)==size(Z,1). 
%                 If x and y are 2d matrix, they are generated by meshgrid
% data          : 2d matrix to be ploted
%
%     Optional:
% v             : vector of contour levels (default:linspace(datamin,datamax,10))
% cmap          : color map array (default:jet)
% pos_colorbar  : 'none', or location with respect to the axes (default:'eastoutside')
% overticklabel : whether or not label the overrange ticks at colorbar (default:true)
% method        : imagesc, contourf, contour or pcolor (default:imagesc)
% ninterp       : repeatedly interp times in each dimension (default:0)
% nancolor      : axis backgroud color
% circsize      ; circle size for scatter plot
%
%     Output variable
% hout          : structure with handles
%                 .h     plot handle
%                 .c     contour matrix (method='contourf')
%                 .hc    colorbar handle (pos_colorbar~='none')
% 2021/06/29 Kurt Feigl add patch

% function a = findArea(width,varargin)
%    defaultHeight = 1;
%    defaultUnits = 'inches';
%    defaultShape = 'rectangle';
%    expectedShapes = {'square','rectangle','parallelogram'};
% 
%    p = inputParser;
%    validScalarPosNum = @(x) isnumeric(x) && isscalar(x) && (x > 0);
%    addRequired(p,'width',validScalarPosNum);
%    addOptional(p,'height',defaultHeight,validScalarPosNum);
%    addParameter(p,'units',defaultUnits,@isstring);
%    addParameter(p,'shape',defaultShape,...
%                  @(x) any(validatestring(x,expectedShapes)));
%    parse(p,width,varargin{:});
%    
%    a = p.Results.width*p.Results.height; 
% end

% parse arguments 
% https://www.mathworks.com/help/matlab/ref/inputparser.html
%function a = findArea(width,varargin)

% %cmap,pos_colorbar,overticklabel,method,ninterp,nancolor,circsize)
%    defaultSymbolSize = 3;
%    defaultCmap = 'jet';
%    defaultShape = 'rectangle';
%    expectedShapes = {'square','rectangle','parallelogram'};
% 
%    p = inputParser;
%    validScalarPosNum = @(x) isnumeric(x) && isscalar(x) && (x > 0);
%    addRequired(p,'x',validScalarPosNum);
%    addRequired(p,'y',validScalarPosNum);
%    addRequired(p,'data',validScalarPosNum);
% %    addOptional(p,'SymbolSize',defaultSymbolSize,validScalarPosNum);
% %    addParameter(p,'units',defaultCmap,@isstring);
% %    addParameter(p,'shape',defaultShape,...
% %                  @(x) any(validatestring(x,expectedShapes)));
%    parse(p,x,y,data,varargin{:});
%    
%    %a = p.Results.width*p.Results.height; 
% 
% x = p.Results.x;
% y = p.Results.y;
% data = p.Results.data;

% Create an inputParser object and add a name-value pair into the input scheme.
% 
P = inputParser;
% paramName = 'myParam';
% defaultVal = 0;
% addParameter(p,paramName,defaultVal)
validPosNum = @(x) isnumeric(x);
addRequired(P,'x',validPosNum);
addRequired(P,'y',validPosNum);
addRequired(P,'data',validPosNum);
addParameter(P,'levels',1:10);
addParameter(P,'cmap', 'jet');%, @isstring);
addParameter(P,'symsize',5);
addParameter(P,'symbol','o');
addParameter(P,'ninterp',0);
addParameter(P,'method','imagesc');
addParameter(P,'pos_colorbar','eastoutside');
addParameter(P,'labelstring','');
parse(P,x,y,data,varargin{:});
%P.Results

if isfield(P.Results,'levels') ,v=P.Results.levels;        end
if isfield(P.Results,'cmap')   ,cmap=P.Results.cmap;       end
if isfield(P.Results,'symsize'),symsize=P.Results.symsize; end
if isfield(P.Results,'symbol') ,symbol=P.Results.symbol;   end
if isfield(P.Results,'ninterp'),ninterp=P.Results.ninterp; end
if isfield(P.Results,'method'), method=P.Results.method;   end
if isfield(P.Results,'labelstring'), labelstring=P.Results.labelstring;   end
if isfield(P.Results,'pos_colorbar') ,pos_colorbar=P.Results.pos_colorbar;   end
% method
% ninterp
% symsize
% symbol
% v
% Pass both the parameter name and value to the parse method, and display the results.
% 
% parse(p,'myParam',100);
% p.Results
% ans = struct with fields:
%     myParam: 100

datamax = nanmax(data(:));
datamin = nanmin(data(:));

if(~exist('v','var')||isempty(v)),                         v = linspace(datamin,datamax,10); end
if(~exist('cmap','var')||isempty(cmap)),                   cmap = jet;                       end
if(~exist('pos_colorbar','var')||isempty(pos_colorbar)),   pos_colorbar = 'eastoutside';     end
if(~exist('overticklabel','var')||isempty(overticklabel)), overticklabel = true;             end
if(~exist('method','var')||isempty(method)),               method = 'imagesc';               end
if(~exist('ninterp','var')||isempty(ninterp)),             ninterp = 0;                      end
if(~exist('symsize','var')||isempty(symsize)),             symsize = 1;                      end
if(~exist('labelstring','var') || isempty(labelstring)),   labelstring = '';                 end
if(ninterp>0)
    data=interp2(data,ninterp);
    if( strcmp(method,'contourf')||strcmp(method,'contour')||strcmp(method,'pcolor') )
        if( isvector(x)&&isvector(y) )  % vector to meshgrid
            [x,y] = meshgrid(x,y);
        end
        x = interp2(x,ninterp);
        y = interp2(y,ninterp);
    end
end
if( strcmp(method,'imagesc')&&~isvector(x) ) % meshgrid to vector
    x = x(1,:);
    y = y(:,1);
end

if(isrow(v)), v = v'; end
v = sort(v);
% extendmin = datamin<v(1);
% extendmax = datamax>v(end);
if(datamin<v(1))
    v = [-inf;v];
end
if(datamax>v(end))
    v = [v;inf];
end
nlev = length(v);

% piecewise linear mapping,  v -> 1:nlev,    data -> 1 to nlev
z = zeros(size(data));
for i=1:nlev-1
    if( i==1 && v(i)==-inf )
        index = data<v(2);
        z(index) = i+(data(index)-datamin)/(v(2)-datamin);
    elseif( i==(nlev-1) && v(i)==inf )
        index = data>=v(end-1);
        z(index) = i+(data(index)-v(end-1))/(datamax-v(end-1));
    else
        index = data>=v(i) & data<v(i+1);
        z(index) = i+(data(index)-v(i))/(v(i+1)-v(i));
    end
end
z(isnan(data)) = nan;


% draw
if(strcmp(method,'imagesc'))
    hout.h = imagesc(x,y,z,'AlphaData',~isnan(z));
elseif(strcmp(method,'contourf'))
    [hout.c,hout.h] = contourf(x,y,z,1:nlev-1);
elseif(strcmp(method,'contour'))
    [hout.c,hout.h] = contour(x,y,z,1:nlev-1);
elseif(strcmp(method,'pcolor'))
    hout.h = pcolor(x,y,z);shading flat
elseif(strcmp(method,'scatter'))
    hout.h = scatter(x,y,symsize,z,symbol,'filled'); 
end

% set coordinates
axis xy; 
axis equal;
axis tight;

if(exist('nancolor','var')), set(gca,'color',nancolor); end
    
% set colormap and colorbar
Ncmap=size(cmap,1);
Ndraw=nlev-1;
cmapdraw(1:Ndraw,:)=cmap( round(linspace(1,Ncmap,Ndraw)) ,:);
colormap(gca,cmapdraw);
caxis([1,nlev]);
if(~strcmp(pos_colorbar,'none'))
    %pos_colorbar
    hc = colorbar('location',pos_colorbar);
    if(overticklabel)
        vlabel = v;
        if(v(1)==-inf), vlabel(1) = datamin; end
        if(v(end)==inf), vlabel(end) = datamax; end
    else
        vlabel = cellstr(num2str(v));
        if(v(1)==-inf), vlabel(1) = {''}; end
        if(v(end)==inf), vlabel(end) = {''}; end
    end
    %vlabel
    set(hc,'TickLabels',vlabel);
    
%     if(any(strcmp(pos_colorbar,{'eastoutside','westoutside','east','west'})))
%         ylimits = get(hc,'Ylim');
%         ystep = (ylimits(2)-ylimits(1))/Ndraw;
%         set(hc,'ytick',ylimits(1):ystep:ylimits(2))
%         set(hc,'yticklabel',vlabel);
%     elseif(any(strcmp(pos_colorbar,{'southoutside','northoutside','south','north'})))
%         xlimits = get(hc,'Xlim');
%         xstep = (xlimits(2)-xlimits(1))/Ndraw;
%         set(hc,'xtick',xlimits(1):xstep:xlimits(2))
%         set(hc,'xticklabel',vlabel);
%     end

    %To add a text description along the colorbar, access the underlying text object using the Label property of the colorbar.
    labelstring
    hc.Label.String=labelstring;
    hout.hc = hc;
end

% return graphics handle
if nargout >= 1
    varargout{1} = hout;
end

% return rescaled z
if nargout >= 2
    varargout{2} = z;
end
